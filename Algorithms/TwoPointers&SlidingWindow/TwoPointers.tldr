{
	"tldrawFileFormatVersion": 1,
	"schema": {
		"schemaVersion": 2,
		"sequences": {
			"com.tldraw.store": 4,
			"com.tldraw.asset": 1,
			"com.tldraw.camera": 1,
			"com.tldraw.document": 2,
			"com.tldraw.instance": 25,
			"com.tldraw.instance_page_state": 5,
			"com.tldraw.page": 1,
			"com.tldraw.instance_presence": 6,
			"com.tldraw.pointer": 1,
			"com.tldraw.shape": 4,
			"com.tldraw.asset.bookmark": 2,
			"com.tldraw.asset.image": 5,
			"com.tldraw.asset.video": 5,
			"com.tldraw.shape.group": 0,
			"com.tldraw.shape.text": 3,
			"com.tldraw.shape.bookmark": 2,
			"com.tldraw.shape.draw": 2,
			"com.tldraw.shape.geo": 10,
			"com.tldraw.shape.note": 9,
			"com.tldraw.shape.line": 5,
			"com.tldraw.shape.frame": 1,
			"com.tldraw.shape.arrow": 6,
			"com.tldraw.shape.highlight": 1,
			"com.tldraw.shape.embed": 4,
			"com.tldraw.shape.image": 5,
			"com.tldraw.shape.video": 4,
			"com.tldraw.binding.arrow": 1
		}
	},
	"records": [
		{
			"gridSize": 10,
			"name": "",
			"meta": {},
			"id": "document:document",
			"typeName": "document"
		},
		{
			"meta": {},
			"id": "page:page",
			"name": "Page 1",
			"index": "a1",
			"typeName": "page"
		},
		{
			"id": "pointer:pointer",
			"typeName": "pointer",
			"x": 391.2229405814546,
			"y": 1910.7855739048637,
			"lastActivityTimestamp": 1750528760517,
			"meta": {}
		},
		{
			"followingUserId": null,
			"opacityForNextShape": 1,
			"stylesForNextShape": {},
			"brush": null,
			"scribbles": [],
			"cursor": {
				"type": "default",
				"rotation": 0
			},
			"isFocusMode": false,
			"exportBackground": true,
			"isDebugMode": false,
			"isToolLocked": false,
			"screenBounds": {
				"x": 0,
				"y": 0,
				"w": 643.3333740234375,
				"h": 566
			},
			"insets": [
				false,
				false,
				true,
				false
			],
			"zoomBrush": null,
			"isGridMode": false,
			"isPenMode": false,
			"chatMessage": "",
			"isChatting": false,
			"highlightedUserIds": [],
			"isFocused": true,
			"devicePixelRatio": 1.5,
			"isCoarsePointer": false,
			"isHoveringCanvas": true,
			"openMenus": [],
			"isChangingStyle": false,
			"isReadonly": false,
			"meta": {},
			"duplicateProps": null,
			"id": "instance:instance",
			"currentPageId": "page:page",
			"typeName": "instance"
		},
		{
			"editingShapeId": "shape:a-7wRdLjWO3LWdHfcbIoh",
			"croppingShapeId": null,
			"selectedShapeIds": [
				"shape:a-7wRdLjWO3LWdHfcbIoh"
			],
			"hoveredShapeId": "shape:a-7wRdLjWO3LWdHfcbIoh",
			"erasingShapeIds": [],
			"hintingShapeIds": [],
			"focusedGroupId": null,
			"meta": {},
			"id": "instance_page_state:page:page",
			"pageId": "page:page",
			"typeName": "instance_page_state"
		},
		{
			"x": -56.51519690666788,
			"y": -1263.1514986611726,
			"z": 0.4591070565759795,
			"meta": {},
			"id": "camera:page:page",
			"typeName": "camera"
		},
		{
			"x": 99.66667175292969,
			"y": 103.13541793823242,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:a-7wRdLjWO3LWdHfcbIoh",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 5170.6044921875,
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1,
				"richText": {
					"type": "doc",
					"content": [
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							}
						},
						{
							"type": "heading",
							"attrs": {
								"dir": "auto",
								"level": 3
							},
							"content": [
								{
									"type": "text",
									"text": "üîç What is the Two Pointers Technique?"
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": "The "
								},
								{
									"type": "text",
									"marks": [
										{
											"type": "bold"
										}
									],
									"text": "two pointers technique"
								},
								{
									"type": "text",
									"text": " uses "
								},
								{
									"type": "text",
									"marks": [
										{
											"type": "bold"
										}
									],
									"text": "two variables (pointers)"
								},
								{
									"type": "text",
									"text": " to traverse a data structure ‚Äî usually an array or linked list ‚Äî in a way that reduces time complexity from O(n¬≤) to O(n) in many cases."
								}
							]
						},
						{
							"type": "heading",
							"attrs": {
								"dir": "auto",
								"level": 4
							},
							"content": [
								{
									"type": "text",
									"text": "üéØ Common Goals:"
								}
							]
						},
						{
							"type": "bulletList",
							"content": [
								{
									"type": "listItem",
									"content": [
										{
											"type": "paragraph",
											"attrs": {
												"dir": "auto"
											},
											"content": [
												{
													"type": "text",
													"text": "Find pairs or triplets satisfying a condition"
												}
											]
										}
									]
								},
								{
									"type": "listItem",
									"content": [
										{
											"type": "paragraph",
											"attrs": {
												"dir": "auto"
											},
											"content": [
												{
													"type": "text",
													"text": "Reverse elements"
												}
											]
										}
									]
								},
								{
									"type": "listItem",
									"content": [
										{
											"type": "paragraph",
											"attrs": {
												"dir": "auto"
											},
											"content": [
												{
													"type": "text",
													"text": "Remove duplicates"
												}
											]
										}
									]
								},
								{
									"type": "listItem",
									"content": [
										{
											"type": "paragraph",
											"attrs": {
												"dir": "auto"
											},
											"content": [
												{
													"type": "text",
													"text": "Detect palindromes"
												}
											]
										}
									]
								},
								{
									"type": "listItem",
									"content": [
										{
											"type": "paragraph",
											"attrs": {
												"dir": "auto"
											},
											"content": [
												{
													"type": "text",
													"text": "Partition arrays"
												}
											]
										}
									]
								},
								{
									"type": "listItem",
									"content": [
										{
											"type": "paragraph",
											"attrs": {
												"dir": "auto"
											},
											"content": [
												{
													"type": "text",
													"text": "Merge sorted arrays"
												}
											]
										}
									]
								}
							]
						},
						{
							"type": "heading",
							"attrs": {
								"dir": "auto",
								"level": 3
							},
							"content": [
								{
									"type": "text",
									"text": "‚öôÔ∏è Types of Two Pointers"
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": "Type Description "
								},
								{
									"type": "text",
									"marks": [
										{
											"type": "bold"
										}
									],
									"text": "Same Direction"
								},
								{
									"type": "text",
									"text": " Both pointers move in the same direction (‚Üí‚Üí) "
								},
								{
									"type": "text",
									"marks": [
										{
											"type": "bold"
										}
									],
									"text": "Opposite Direction"
								},
								{
									"type": "text",
									"text": " Pointers start at opposite ends and move toward each other (‚Üê‚Üí)"
								}
							]
						},
						{
							"type": "heading",
							"attrs": {
								"dir": "auto",
								"level": 3
							},
							"content": [
								{
									"type": "text",
									"text": "üìå Let's Understand with Examples"
								}
							]
						},
						{
							"type": "heading",
							"attrs": {
								"dir": "auto",
								"level": 4
							},
							"content": [
								{
									"type": "text",
									"marks": [
										{
											"type": "bold"
										}
									],
									"text": "1. Finding a Pair with a Given Sum in Sorted Array"
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"marks": [
										{
											"type": "code"
										}
									],
									"text": "// Example: nums = [1, 2, 4, 7, 11, 15], target = 15  int left = 0; int right = nums.length - 1;  while (left < right) {     int sum = nums[left] + nums[right];     if (sum == target) {         return new int[]{left, right};     } else if (sum < target) {         left++; // Need a bigger number     } else {         right--; // Need a smaller number     } } "
								}
							]
						},
						{
							"type": "heading",
							"attrs": {
								"dir": "auto",
								"level": 4
							},
							"content": [
								{
									"type": "text",
									"text": "üîç Explanation:"
								}
							]
						},
						{
							"type": "bulletList",
							"content": [
								{
									"type": "listItem",
									"content": [
										{
											"type": "paragraph",
											"attrs": {
												"dir": "auto"
											},
											"content": [
												{
													"type": "text",
													"text": "Array is sorted."
												}
											]
										}
									]
								},
								{
									"type": "listItem",
									"content": [
										{
											"type": "paragraph",
											"attrs": {
												"dir": "auto"
											},
											"content": [
												{
													"type": "text",
													"text": "Move "
												},
												{
													"type": "text",
													"marks": [
														{
															"type": "code"
														}
													],
													"text": "left"
												},
												{
													"type": "text",
													"text": " to increase sum, "
												},
												{
													"type": "text",
													"marks": [
														{
															"type": "code"
														}
													],
													"text": "right"
												},
												{
													"type": "text",
													"text": " to decrease it."
												}
											]
										}
									]
								},
								{
									"type": "listItem",
									"content": [
										{
											"type": "paragraph",
											"attrs": {
												"dir": "auto"
											},
											"content": [
												{
													"type": "text",
													"text": "Time complexity: "
												},
												{
													"type": "text",
													"marks": [
														{
															"type": "bold"
														}
													],
													"text": "O(n)"
												},
												{
													"type": "text",
													"text": " (better than nested loop O(n¬≤))."
												}
											]
										}
									]
								}
							]
						},
						{
							"type": "heading",
							"attrs": {
								"dir": "auto",
								"level": 4
							},
							"content": [
								{
									"type": "text",
									"marks": [
										{
											"type": "bold"
										}
									],
									"text": "2. Remove Duplicates from Sorted Array"
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"marks": [
										{
											"type": "code"
										}
									],
									"text": "int i = 0; for (int j = 1; j < nums.length; j++) {     if (nums[i] != nums[j]) {         i++;         nums[i] = nums[j];     } } return i + 1; // Length of unique elements "
								}
							]
						},
						{
							"type": "heading",
							"attrs": {
								"dir": "auto",
								"level": 4
							},
							"content": [
								{
									"type": "text",
									"text": "üîç Explanation:"
								}
							]
						},
						{
							"type": "bulletList",
							"content": [
								{
									"type": "listItem",
									"content": [
										{
											"type": "paragraph",
											"attrs": {
												"dir": "auto"
											},
											"content": [
												{
													"type": "text",
													"marks": [
														{
															"type": "code"
														}
													],
													"text": "i"
												},
												{
													"type": "text",
													"text": " points to the last unique element."
												}
											]
										}
									]
								},
								{
									"type": "listItem",
									"content": [
										{
											"type": "paragraph",
											"attrs": {
												"dir": "auto"
											},
											"content": [
												{
													"type": "text",
													"marks": [
														{
															"type": "code"
														}
													],
													"text": "j"
												},
												{
													"type": "text",
													"text": " explores the rest of the array."
												}
											]
										}
									]
								},
								{
									"type": "listItem",
									"content": [
										{
											"type": "paragraph",
											"attrs": {
												"dir": "auto"
											},
											"content": [
												{
													"type": "text",
													"text": "When a new value is found, place it next to the last unique value."
												}
											]
										}
									]
								}
							]
						},
						{
							"type": "heading",
							"attrs": {
								"dir": "auto",
								"level": 4
							},
							"content": [
								{
									"type": "text",
									"marks": [
										{
											"type": "bold"
										}
									],
									"text": "3. Reverse an Array"
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"marks": [
										{
											"type": "code"
										}
									],
									"text": "int left = 0; int right = arr.length - 1; while (left < right) {     int temp = arr[left];     arr[left] = arr[right];     arr[right] = temp;     left++;     right--; } "
								}
							]
						},
						{
							"type": "heading",
							"attrs": {
								"dir": "auto",
								"level": 4
							},
							"content": [
								{
									"type": "text",
									"text": "üîç Explanation:"
								}
							]
						},
						{
							"type": "bulletList",
							"content": [
								{
									"type": "listItem",
									"content": [
										{
											"type": "paragraph",
											"attrs": {
												"dir": "auto"
											},
											"content": [
												{
													"type": "text",
													"text": "Swap elements from both ends."
												}
											]
										}
									]
								},
								{
									"type": "listItem",
									"content": [
										{
											"type": "paragraph",
											"attrs": {
												"dir": "auto"
											},
											"content": [
												{
													"type": "text",
													"text": "Converge toward the center."
												}
											]
										}
									]
								}
							]
						},
						{
							"type": "heading",
							"attrs": {
								"dir": "auto",
								"level": 4
							},
							"content": [
								{
									"type": "text",
									"marks": [
										{
											"type": "bold"
										}
									],
									"text": "4. Palindrome Check in a String"
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"marks": [
										{
											"type": "code"
										}
									],
									"text": "int left = 0; int right = s.length() - 1; while (left < right) {     if (s.charAt(left) != s.charAt(right)) {         return false;     }     left++;     right--; } return true; "
								}
							]
						},
						{
							"type": "heading",
							"attrs": {
								"dir": "auto",
								"level": 4
							},
							"content": [
								{
									"type": "text",
									"marks": [
										{
											"type": "bold"
										}
									],
									"text": "5. Merging Two Sorted Arrays"
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"marks": [
										{
											"type": "code"
										}
									],
									"text": "int i = 0, j = 0; while (i < arr1.length && j < arr2.length) {     if (arr1[i] < arr2[j]) {         result.add(arr1[i++]);     } else {         result.add(arr2[j++]);     } } "
								}
							]
						},
						{
							"type": "heading",
							"attrs": {
								"dir": "auto",
								"level": 3
							},
							"content": [
								{
									"type": "text",
									"text": "üß† When to Use Two Pointers?"
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": "Use it when:"
								}
							]
						},
						{
							"type": "bulletList",
							"content": [
								{
									"type": "listItem",
									"content": [
										{
											"type": "paragraph",
											"attrs": {
												"dir": "auto"
											},
											"content": [
												{
													"type": "text",
													"text": "Problem involves "
												},
												{
													"type": "text",
													"marks": [
														{
															"type": "bold"
														}
													],
													"text": "sorted arrays or strings"
												}
											]
										}
									]
								},
								{
									"type": "listItem",
									"content": [
										{
											"type": "paragraph",
											"attrs": {
												"dir": "auto"
											},
											"content": [
												{
													"type": "text",
													"text": "You're working with "
												},
												{
													"type": "text",
													"marks": [
														{
															"type": "bold"
														}
													],
													"text": "subarrays, pairs, or partitions"
												}
											]
										}
									]
								},
								{
									"type": "listItem",
									"content": [
										{
											"type": "paragraph",
											"attrs": {
												"dir": "auto"
											},
											"content": [
												{
													"type": "text",
													"text": "You want to avoid "
												},
												{
													"type": "text",
													"marks": [
														{
															"type": "bold"
														}
													],
													"text": "nested loops"
												}
											]
										}
									]
								}
							]
						},
						{
							"type": "heading",
							"attrs": {
								"dir": "auto",
								"level": 3
							},
							"content": [
								{
									"type": "text",
									"text": "üö´ Common Mistakes"
								}
							]
						},
						{
							"type": "orderedList",
							"attrs": {
								"start": 1
							},
							"content": [
								{
									"type": "listItem",
									"content": [
										{
											"type": "paragraph",
											"attrs": {
												"dir": "auto"
											},
											"content": [
												{
													"type": "text",
													"text": "Not updating pointers correctly ‚Üí infinite loop"
												}
											]
										}
									]
								},
								{
									"type": "listItem",
									"content": [
										{
											"type": "paragraph",
											"attrs": {
												"dir": "auto"
											},
											"content": [
												{
													"type": "text",
													"text": "Not handling edge cases (empty arrays, duplicates)"
												}
											]
										}
									]
								},
								{
									"type": "listItem",
									"content": [
										{
											"type": "paragraph",
											"attrs": {
												"dir": "auto"
											},
											"content": [
												{
													"type": "text",
													"text": "Using two pointers on unsorted data "
												},
												{
													"type": "text",
													"marks": [
														{
															"type": "bold"
														}
													],
													"text": "without sorting"
												}
											]
										}
									]
								}
							]
						},
						{
							"type": "heading",
							"attrs": {
								"dir": "auto",
								"level": 3
							},
							"content": [
								{
									"type": "text",
									"text": "üí° Real Interview Problem Examples"
								}
							]
						},
						{
							"type": "bulletList",
							"content": [
								{
									"type": "listItem",
									"content": [
										{
											"type": "paragraph",
											"attrs": {
												"dir": "auto"
											},
											"content": [
												{
													"type": "text",
													"marks": [
														{
															"type": "bold"
														}
													],
													"text": "Leetcode 167:"
												},
												{
													"type": "text",
													"text": " Two Sum II ‚Äì Input array is sorted"
												}
											]
										}
									]
								},
								{
									"type": "listItem",
									"content": [
										{
											"type": "paragraph",
											"attrs": {
												"dir": "auto"
											},
											"content": [
												{
													"type": "text",
													"marks": [
														{
															"type": "bold"
														}
													],
													"text": "Leetcode 283:"
												},
												{
													"type": "text",
													"text": " Move Zeroes"
												}
											]
										}
									]
								},
								{
									"type": "listItem",
									"content": [
										{
											"type": "paragraph",
											"attrs": {
												"dir": "auto"
											},
											"content": [
												{
													"type": "text",
													"marks": [
														{
															"type": "bold"
														}
													],
													"text": "Leetcode 344:"
												},
												{
													"type": "text",
													"text": " Reverse String"
												}
											]
										}
									]
								},
								{
									"type": "listItem",
									"content": [
										{
											"type": "paragraph",
											"attrs": {
												"dir": "auto"
											},
											"content": [
												{
													"type": "text",
													"marks": [
														{
															"type": "bold"
														}
													],
													"text": "Leetcode 11:"
												},
												{
													"type": "text",
													"text": " Container With Most Water"
												}
											]
										}
									]
								},
								{
									"type": "listItem",
									"content": [
										{
											"type": "paragraph",
											"attrs": {
												"dir": "auto"
											},
											"content": [
												{
													"type": "text",
													"marks": [
														{
															"type": "bold"
														}
													],
													"text": "Leetcode 26:"
												},
												{
													"type": "text",
													"text": " Remove Duplicates from Sorted Array"
												}
											]
										}
									]
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							}
						}
					]
				}
			},
			"parentId": "page:page",
			"index": "a1",
			"typeName": "shape"
		}
	]
}