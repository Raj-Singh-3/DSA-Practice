Defination of Tree:
        Collection of node connected through edges in a hierarchial from
        It is a non linear data structures.


the given tree is a binary tree 
                5    level 0
               / \
              6   8  level 1 (height of root node that is 5 is 2 - height of node like 6 or 8 is 1). 2 - 1 = 1
             / \  / \
            3   2 4  1  level 2
Terminologies:
    a) size = total no. of nodes
    b) child, parent, siblings
    c) edge = line between two nodes
    d) height of node = maximum no. of edge from that node to leaf node.
                (longest path between node and leaf)
                for example the max no. of edge from node 5 to leaf node is 2. 
                therefore, the height is 2.
        height of tree = (max. no. of edges from root to leaf nodes)
    e) leaf node: the lowest nodes(means whose left as well as right child is also null).
    f) level: height of root - height of node. (root level = 0)
    g) depth = no. of edge from that node to root node.
    g) ancestor and descendent: we can traverse from 5 to 3. hence, 5 is ancestor and 3 is descendent.
    h) degree of node: no. of child a node can have either 0, 1, or 2.
       degree of tree: calculate degree of each node in that tree, the maximum degree will be the degree of tree.
    i) cousins: same level but different parrent like 3, 4 in level 2.



Types of Binary Tree:

a) Complete Binary Tree:

    here every level should be complete that means in each node two child must be present.
    Except at last level.


    1) all level full
    2) last level full from left to right.

                5    level 0
               / \
              6   8  level 1 
             / \  / \
            3   2 4  3  level 2
           /
          4

          (allowed)

                  5    level 0
               / \
              6   8  level 1 
             / \  / \
            3   2 4  3  level 2
           / \
          4   6

          (allowed)


                   5    level 0
               / \
              6   8  level 1 
             / \  / \
            3   2 4  3  level 2
           /   /
          4    7

          (not allowed)

b) Full Binary tree or Strict binary tree:
    a) Every node has either 2 children or 0 children.
                5    level 0
               / \
              6   8  level 1 
             / \  / \
            3   2 4  3  level 2
           / \
          4   6

c) Perfect Binary Tree:
        a) All levels are Full
        b) all leaf node at same level.

                5    level 0
               / \
              6   8  level 1
             / \  / \
            3   2 4  3  level 2



d) Height balanced Tree:

        where the average height of tree will be o(logn)
        Example: AVL Tree



e) Skewed Binary tree:
        where each node must have a single child and may or may at the same direction.
                5    
               / 
              6 
               \ 
                2 


            
                5   
               /      (left skewed)
              6   
             / 
            3   



        5  
        \
          8   (right skewed)
           \
            3 


            
f) Ordered Tree:
    Every node has some Property 
    Example: BST





Properties:
0) if Tree has n nodes than n-1 edges will be there.
1) In Perfect Binary tree, if height is h
        then total no. of nodes = 2^(h+1)  - 1;
2) In Perfect Binary tree, if height is h
        then total no. of leaf nodes = 2^h
3) In Perfect Binary tree, if height is h
        then total no. of internal nodes = 2^(h+1)  - 1 - 2^h = 2^h -1;
4) If n = no. of leaf nodes
        then log(n) + 1 levels atleast
5) if n = no. of nodes
        then log(n+1) min.levels we have.
6) In strict binary tree or full Binary tree
        if n = leaf node then n-1 will be internal node.
        i.e no . of leaf node = no. of internal node + 1;

7) no. of leaf node = 1 + no. of internal node with 2 children(not including root node).



Tree Traversals
1) DFS
        a) Inorder 
        b) PreOrder
        c) PostOrder
2) BFS
3) Vertical Order Traversal