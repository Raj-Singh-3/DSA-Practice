Heap is a data structure which is made up of Complete Binary tree and some Heap Properties.
Heap = Complete Binary Tree  + Heap Properties

Complete Binary Tree:
        It is a binary tree where all nodes has either 0 or 2 children and it fills from left side. 

Types Of heap:
    1) Min Heap
    2) Max Heap

Min heap : Value of node is less than or equal to its child nodes.
            5
           / \
          20  15
         /  \   
        10   12

Max heap: Value of node is greater than or equal to its child node.
            67
           /   \
          45    34
         /  \   / \ 
        7    6  9  3

Array will be used over here to make this data structure.

Properties:

1) If Parent Node is at ith Position then its child will be at 2*1+1, 2*i+2. 
2) If child node is at ith index, then parent will be at 'ceil'(N/2)-1 .
3) if height of tree is 'h' , max nodes in a complete Binary Tree will be (2^(h+1))-1 , h always start from 0.
4) If there are N nodes, then the height of complete Binary Tree is 'floor'(logN base 2)
5) Range of leave Nodes in a Complete Binary Tree is (N/2) to N-1. (For '0' Based Indexing)


**********************************************************************************************************


Heapify:
The Process of rearranging the heap by recursively comparing a parent node with its child node.
Visit "Heapify and BuildHeap.pdf" for better understanding.





Time Complexities:

1) Heapify : O(log(N) base 2)
2) buildHeap: O(N)
3) extractMax: O(1) + O(log(N) base 2)
4) increaseKey: O(log(N) base 2)
5) decreaseKey: O(log(N) base 2)
6) insert:  O(1) + O(log(N) base 2)
7) HeapSort: O( N * log(N) base 2)